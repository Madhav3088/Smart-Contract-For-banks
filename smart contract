// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract Banking {
    mapping(address => unit256 ) public balances;
    address payable owner;
    constructor() public{
        owner = payable(msg.sender);

    }
    
    function deposit() public payable {
        require(msg.value > 0,"Deposit amount must be greater than o.");
        balances[msg.sender] += msg.values;
    }
    function withdrawl (unit256 amount) public {
        require (msg.sender == owner, "only the owner can withdraw funds");
        require (amount <= balances[msg.sender],"Insufficient funds.");
        require(amount > 0,"Withdrawl amount must be greater than 0");
        payable(msg.sender).transfer (amount);
        balances[msg.sender] -= amount;

    }   
    function transfer(address payable recipient, unit256 amount) public {
        require (amount <= balances[msg.sender],"Insufficient funds.");
        require(amount > 0,"Withdrawl amount must be greater than 0");
        balances[msg.sender] -= amount;
        balances[recipient] += amount;
    }

    function getbalance(address payable  user) public view returns (unit256) {
        return balances[user];

    }
    function grantAccess(address payable user) public {
        require(msg.sender == owner,"only the owner can grant access.");
        owner = user;

    }
     function revokeAccess(address payable user) public {
         require(msg.sender == owner,"only the owner can revoke access.");
         require( user != owner, "cannot revoke access for the current owner.");
         owner = payable (msg.sender);

     }
     function destroy() public{
         require(msg.sender == owner,"Only the ownercan destroy the contract.");
         selfdestruct(owner);

     }
}
